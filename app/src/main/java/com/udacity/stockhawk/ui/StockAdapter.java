package com.udacity.stockhawk.ui;


import android.content.Context;
import android.database.Cursor;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.support.v7.widget.GridLayout;
import android.support.v7.widget.RecyclerView;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TabHost;
import android.widget.TextView;

import com.udacity.stockhawk.R;
import com.udacity.stockhawk.data.Contract;
import com.udacity.stockhawk.data.PrefUtils;

import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Currency;
import java.util.List;
import java.util.Locale;

import butterknife.BindView;
import butterknife.ButterKnife;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.view.LineChartView;
import timber.log.Timber;

class StockAdapter extends RecyclerView.Adapter<StockAdapter.StockViewHolder> {

    private final Context context;
    private final DecimalFormat dollarFormatWithPlus;
    private final DecimalFormat dollarFormat;
    private final DecimalFormat percentageFormat;
    private Cursor cursor;
    private final StockAdapterOnClickHandler clickHandler;
    private int expandedPosition = -1;


    StockAdapter(Context context, StockAdapterOnClickHandler clickHandler) {
        this.context = context;
        this.clickHandler = clickHandler;

        Locale locale = PrefUtils.getCurrentLocale(context);
        dollarFormat = (DecimalFormat) NumberFormat.getCurrencyInstance(locale);
        dollarFormatWithPlus = (DecimalFormat) NumberFormat.getCurrencyInstance(locale);
        dollarFormatWithPlus.setPositivePrefix("+" + Currency.getInstance(locale).getSymbol());
        percentageFormat = (DecimalFormat) NumberFormat.getPercentInstance(locale);
        percentageFormat.setMaximumFractionDigits(2);
        percentageFormat.setMinimumFractionDigits(2);
        percentageFormat.setPositivePrefix("+");
    }

    void setCursor(Cursor cursor) {
        this.cursor = cursor;
        notifyDataSetChanged();
    }

    String getSymbolAtPosition(int position) {

        cursor.moveToPosition(position);
        return cursor.getString(Contract.Quote.POSITION_SYMBOL);
    }

    @Override
    public StockViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {

        View item = LayoutInflater.from(context).inflate(R.layout.list_item_quote, parent, false);
        return new StockViewHolder(item);
    }

    public void configureAxes(String history[], LineChartData data) {

        ArrayList<PointValue> monthPv = new ArrayList<>();
        ArrayList<AxisValue> xLabel = new ArrayList<>();

        int len = history.length;
        for (int i = 0; i < len; i++) {
            String item[] = history[i].split(",");
            PointValue pointValue = new PointValue(len - 1 - i, Float.valueOf(item[1]));
            String date = PrefUtils.getChartDate(item[0]);
            pointValue.setLabel(date);
            monthPv.add(pointValue);

            if (i !=0 && i % (len / 5) == 0) {
                Timber.d(date);
                AxisValue axisValue = new AxisValue(len - 1 - i);
                axisValue.setLabel(date);
                xLabel.add(axisValue);
            }
        }

        // Prepare data for chart
        Line monthLine = new Line(monthPv).setColor(Color.WHITE).setCubic(false).setHasLines(true);
        ArrayList<Line> lines = new ArrayList<>();
        lines.add(monthLine);
        data.setLines(lines);

        // Init x-axis
        Axis axisX = new Axis(xLabel);
        axisX.setTextColor(Color.WHITE);
        axisX.setHasLines(true);
        axisX.setMaxLabelChars(5);
        data.setAxisXBottom(axisX);

        // Init y-axis
        Axis axisY = new Axis();
        axisY.setTextColor(Color.WHITE);
        axisY.setAutoGenerated(true);
        axisY.setHasLines(true);
        axisY.setMaxLabelChars(5);
        data.setAxisYLeft(axisY);
    }

    @Override
    public void onBindViewHolder(StockViewHolder holder, int position, List<Object> payloads) {

        cursor.moveToPosition(position);
        String history[] = cursor.getString(Contract.Quote.POSITION_HISTORY).split("\n");

        holder.monthData = new LineChartData();
        holder.weekData = new LineChartData();
        configureAxes(history, holder.monthData);
        configureAxes(Arrays.copyOfRange(history, 0, 7), holder.weekData);

        Timber.d("bindViewHolder done");
        onBindViewHolder(holder, position);
    }

    @Override
    public void onBindViewHolder(StockViewHolder holder, int position) {
        String symbol;

        Locale locale = PrefUtils.getCurrentLocale(context);

        cursor.moveToPosition(position);

        symbol = cursor.getString(Contract.Quote.POSITION_SYMBOL);
        holder.symbol.setText(symbol);
        holder.symbol.setContentDescription(symbol);

        holder.price.setText(dollarFormat.format(cursor.getFloat(Contract.Quote.POSITION_PRICE)));
        holder.price.setContentDescription(dollarFormat.format(cursor.getFloat(Contract.Quote.POSITION_PRICE)));


        float rawAbsoluteChange = cursor.getFloat(Contract.Quote.POSITION_ABSOLUTE_CHANGE);
        float percentageChange = cursor.getFloat(Contract.Quote.POSITION_PERCENTAGE_CHANGE);

        if (rawAbsoluteChange > 0) {
            holder.change.setBackgroundResource(R.drawable.percent_change_pill_green);
        } else {
            holder.change.setBackgroundResource(R.drawable.percent_change_pill_red);
        }

        String change = dollarFormatWithPlus.format(rawAbsoluteChange);
        String percentage = percentageFormat.format(percentageChange / 100);

        if (PrefUtils.getDisplayMode(context)
                .equals(context.getString(R.string.pref_display_mode_absolute_key))) {
            holder.change.setText(change);
            holder.change.setContentDescription(change);
        } else {
            holder.change.setText(percentage);
            holder.change.setContentDescription(percentage);
        }

        if (position == expandedPosition) {
            holder.itemView.setElevation(16);
            holder.stockGrid.setBackgroundColor(context.getResources().getColor(R.color.colorPrimaryDark));
            holder.symbol.setGravity(Gravity.CENTER_HORIZONTAL);
            holder.priceContainer.setGravity(Gravity.CENTER_HORIZONTAL);
            holder.stockChart.setInteractive(false);
            holder.stockChart.setLineChartData(holder.weekData);
            holder.stockChart.setVisibility(View.VISIBLE);
            holder.mTabContent.setVisibility(View.VISIBLE);
            holder.mTabHost.setVisibility(View.VISIBLE);
        } else {
            holder.itemView.setElevation(0);
            holder.stockGrid.setBackground(holder.drawable);
            holder.symbol.setGravity(Gravity.CENTER_VERTICAL|Gravity.START);
            holder.priceContainer.setGravity(Gravity.CENTER_VERTICAL|Gravity.END);
            holder.mTabHost.setVisibility(View.GONE);
        }

    }

    @Override
    public int getItemCount() {
        int count = 0;
        if (cursor != null) {
            count = cursor.getCount();
        }
        return count;
    }


    interface StockAdapterOnClickHandler {
        void onClick(String symbol);
    }

    class StockViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener,
        TabHost.OnTabChangeListener {

        @BindView(R.id.stock_grid)
        GridLayout stockGrid;

        @BindView(R.id.symbol)
        TextView symbol;

        @BindView(R.id.price_container)
        LinearLayout priceContainer;

        @BindView(R.id.price)
        TextView price;

        @BindView(R.id.change)
        TextView change;

        @BindView(android.R.id.tabhost)
        TabHost mTabHost;

        @BindView(android.R.id.tabcontent)
        View mTabContent;

        @BindView(R.id.stock_chart)
        LineChartView stockChart;

        Drawable drawable;
        LineChartData monthData;
        LineChartData weekData;

        StockViewHolder(View itemView) {
            super(itemView);
            ButterKnife.bind(this, itemView);
            itemView.setOnClickListener(this);
            mTabHost.setOnTabChangedListener(this);
            create_tabs();
        }

        public void create_tabs() {
            mTabHost.setup();
            TabHost.TabSpec tabSpec = mTabHost.newTabSpec(context.getString(R.string.tab_one_week));
            tabSpec.setIndicator(context.getString(R.string.tab_one_week));
            tabSpec.setContent(android.R.id.tabcontent);
            mTabHost.addTab(tabSpec);

            tabSpec = mTabHost.newTabSpec(context.getString(R.string.tab_one_month));
            tabSpec.setIndicator(context.getString(R.string.tab_one_month));
            tabSpec.setContent(android.R.id.tabcontent);
            mTabHost.addTab(tabSpec);
            mTabHost.setCurrentTab(0);
        }

        @Override
        public void onClick(View v) {
            RecyclerView.ViewHolder holder = (RecyclerView.ViewHolder) v.getTag();
            int adapterPosition = getAdapterPosition();
            cursor.moveToPosition(adapterPosition);
            int symbolColumn = cursor.getColumnIndex(Contract.Quote.COLUMN_SYMBOL);

            if (expandedPosition == adapterPosition) {
                expandedPosition = -1;
                notifyItemChanged(adapterPosition);
            } else if (expandedPosition >= 0) {
                int prev = expandedPosition;
                expandedPosition = adapterPosition;
                notifyItemChanged(prev);
                notifyItemChanged(expandedPosition, null);
            } else {
                // Set the current position to "expanded"
                drawable = stockGrid.getBackground();
                expandedPosition = adapterPosition;
                notifyItemChanged(expandedPosition, null);
            }
            clickHandler.onClick(cursor.getString(symbolColumn));

        }

        @Override
        public void onTabChanged(String s) {
            Timber.d("Tab selected: " + s);
            if (s.equals(context.getString(R.string.tab_one_week))) {
                stockChart.setLineChartData(weekData);
            } else if (s.equals(context.getString(R.string.tab_one_month))) {
                stockChart.setLineChartData(monthData);
            }
        }

    }
}
